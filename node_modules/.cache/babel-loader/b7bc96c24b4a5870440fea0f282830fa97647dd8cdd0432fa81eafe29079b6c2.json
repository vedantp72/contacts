{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ui-Projects\\\\contact-list\\\\src\\\\JSInterviewQue\\\\Programs\\\\primeNumber.js\";\nimport React from 'react';\n// import { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PrimeNumber() {\n  //      useEffect(() => {\n  //         let n = prompt(\"Enter a number\");\n  //         n = parseInt(n);\n  //         let isPrime = true;\n  //         if (n === 1) {\n  //             console.log(\"1 is neither prime nor composite\");\n\n  //         } else if (n > 1) {\n  //             for (let i = 2; i < n; i++) {\n  //                 if (n % i == 0) {\n  //                     isPrime = false;\n  //                     break;\n  //                 }\n  //             }\n  //             if (isPrime) {\n  //                 console.log(n + \" is a prime number\");\n  //             } else {\n  //                 console.log(n + \" is not a prime number\");\n  //             }\n\n  //     }\n  // else {\n  //     console.log(n + \" is not a prime number\");\n  // }\n  //     },[])\n\n  function firstRepeating(str) {\n    str.toUpperCase();\n    const n = str.length;\n    let ans = '\\0';\n    let index = Infinity;\n    for (let i = 0; i < n; i++) {\n      const temp = str[i];\n      // Checking if the character in temp repeats or not\n      for (let j = i + 1; j < n; j++) {\n        if (str[j] === temp) {\n          // If the index where it repeated is less than\n          // the index of the previously repeated character,\n          // then update ans and index variables\n          if (j < index) {\n            index = j;\n            ans = str[j];\n          }\n        }\n      }\n    }\n    console.log(ans);\n  }\n  firstRepeating(\"Aashish\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_c = PrimeNumber;\nexport default PrimeNumber;\nvar _c;\n$RefreshReg$(_c, \"PrimeNumber\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","PrimeNumber","firstRepeating","str","toUpperCase","n","length","ans","index","Infinity","i","temp","j","console","log","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Ui-Projects/contact-list/src/JSInterviewQue/Programs/primeNumber.js"],"sourcesContent":["import React from 'react'\r\n// import { useEffect } from 'react';\r\n\r\nfunction PrimeNumber() {\r\n\r\n    //      useEffect(() => {\r\n    //         let n = prompt(\"Enter a number\");\r\n    //         n = parseInt(n);\r\n    //         let isPrime = true;\r\n    //         if (n === 1) {\r\n    //             console.log(\"1 is neither prime nor composite\");\r\n\r\n    //         } else if (n > 1) {\r\n    //             for (let i = 2; i < n; i++) {\r\n    //                 if (n % i == 0) {\r\n    //                     isPrime = false;\r\n    //                     break;\r\n    //                 }\r\n    //             }\r\n    //             if (isPrime) {\r\n    //                 console.log(n + \" is a prime number\");\r\n    //             } else {\r\n    //                 console.log(n + \" is not a prime number\");\r\n    //             }\r\n\r\n    //     }\r\n    // else {\r\n    //     console.log(n + \" is not a prime number\");\r\n    // }\r\n    //     },[])\r\n\r\n\r\n    function firstRepeating(str) {\r\n        str.toUpperCase();\r\n        const n = str.length;\r\n        let ans = '\\0';\r\n        let index = Infinity;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            const temp = str[i];\r\n            // Checking if the character in temp repeats or not\r\n            for (let j = i + 1; j < n; j++) {\r\n                if (str[j] === temp) {\r\n                    // If the index where it repeated is less than\r\n                    // the index of the previously repeated character,\r\n                    // then update ans and index variables\r\n                    if (j < index) {\r\n                        index = j;\r\n                        ans = str[j];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        console.log(ans)\r\n    }\r\n    firstRepeating(\"Aashish\")\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PrimeNumber\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,WAAWA,CAAA,EAAG;EAEnB;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAGA,SAASC,cAAcA,CAACC,GAAG,EAAE;IACzBA,GAAG,CAACC,WAAW,CAAC,CAAC;IACjB,MAAMC,CAAC,GAAGF,GAAG,CAACG,MAAM;IACpB,IAAIC,GAAG,GAAG,IAAI;IACd,IAAIC,KAAK,GAAGC,QAAQ;IAEpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,CAAC,EAAEK,CAAC,EAAE,EAAE;MACxB,MAAMC,IAAI,GAAGR,GAAG,CAACO,CAAC,CAAC;MACnB;MACA,KAAK,IAAIE,CAAC,GAAGF,CAAC,GAAG,CAAC,EAAEE,CAAC,GAAGP,CAAC,EAAEO,CAAC,EAAE,EAAE;QAC5B,IAAIT,GAAG,CAACS,CAAC,CAAC,KAAKD,IAAI,EAAE;UACjB;UACA;UACA;UACA,IAAIC,CAAC,GAAGJ,KAAK,EAAE;YACXA,KAAK,GAAGI,CAAC;YACTL,GAAG,GAAGJ,GAAG,CAACS,CAAC,CAAC;UAChB;QACJ;MACJ;IACJ;IACAC,OAAO,CAACC,GAAG,CAACP,GAAG,CAAC;EACpB;EACAL,cAAc,CAAC,SAAS,CAAC;EAGzB,oBACIF,OAAA;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEK,CAAC;AAEd;AAACC,EAAA,GA5DQlB,WAAW;AA8DpB,eAAeA,WAAW;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}